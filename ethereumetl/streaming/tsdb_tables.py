from sqlalchemy.sql import func

from sqlalchemy import (
    Table,
    Column,
    Integer,
    DateTime,
    BigInteger,
    String,
    Numeric,
    MetaData,
    Text,
    Boolean,
    TIMESTAMP,
)

metadata = MetaData()

# SQL schema is here https://github.com/blockchain-etl/ethereum-etl-postgres/tree/master/schema

BLOCKS = Table(
    "blocks",
    metadata,
    Column("id", BigInteger),
    Column("block_timestamp", TIMESTAMP, primary_key=True),
    Column("blknum", BigInteger),
    Column("blkhash", String),
    Column("parent_hash", String),
    Column("nonce", String),
    Column("sha3_uncles", String),
    Column("logs_bloom", String),
    Column("txs_root", String),
    Column("state_root", String),
    Column("receipts_root", String),
    Column("miner", String),
    Column("difficulty", Numeric(38)),
    Column("total_difficulty", Numeric(38)),
    Column("blk_size", BigInteger),
    Column("extra_data", Text),
    Column("gas_limit", BigInteger),
    Column("gas_used", BigInteger),
    Column("tx_count", BigInteger),
    Column("base_fee_per_gas", Numeric(38)),
    Column("uncle_count", Integer),
    Column("uncle0_hash", String),
    Column("uncle1_hash", String),
    Column("item_id", String, primary_key=True),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

TRANSACTIONS = Table(
    "txs",
    metadata,
    Column("id", BigInteger),
    Column("block_timestamp", TIMESTAMP, primary_key=True),
    Column("blknum", BigInteger),
    Column("txhash", String),
    Column("txpos", BigInteger),
    Column("nonce", BigInteger),
    Column("from_address", String),
    Column("to_address", String),
    Column("value", Numeric(38)),
    Column("gas", BigInteger),
    Column("gas_price", BigInteger),
    Column("input", String),
    Column("max_fee_per_gas", BigInteger),
    Column("max_priority_fee_per_gas", BigInteger),
    Column("tx_type", BigInteger),
    Column("receipt_cumulative_gas_used", BigInteger),
    Column("receipt_gas_used", BigInteger),
    Column("receipt_contract_address", String),
    Column("receipt_root", String),
    Column("receipt_status", BigInteger),
    Column("receipt_effective_gas_price", BigInteger),
    Column("receipt_log_count", BigInteger),
    Column("item_id", String, primary_key=True),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

LOGS = Table(
    "logs",
    metadata,
    Column("id", BigInteger),
    Column("block_timestamp", TIMESTAMP, primary_key=True),
    Column("blknum", BigInteger),
    Column("txhash", String),
    Column("txpos", BigInteger),
    Column("logpos", BigInteger),
    Column("address", String),
    Column("n_topics", Integer),
    Column("topics", String),
    Column("data", String),
    Column("item_id", String, primary_key=True),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

TOKEN_TRANSFERS = Table(
    "token_xfers",
    metadata,
    Column("id", BigInteger),
    Column("block_timestamp", TIMESTAMP, primary_key=True),
    Column("blknum", BigInteger),
    Column("txhash", String),
    Column("txpos", BigInteger),
    Column("logpos", BigInteger),
    Column("token_address", String),
    Column("from_address", String),
    Column("to_address", String),
    Column("value", Numeric(78)),
    Column("name", String),
    Column("symbol", String),
    Column("decimals", BigInteger),
    Column("item_id", String, primary_key=True),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

ERC721_TRANSFERS = Table(
    "erc721_xfers",
    metadata,
    Column("id", BigInteger),
    Column("block_timestamp", TIMESTAMP, primary_key=True),
    Column("blknum", BigInteger),
    Column("txhash", String),
    Column("txpos", BigInteger),
    Column("logpos", BigInteger),
    Column("token_address", String),
    Column("from_address", String),
    Column("to_address", String),
    Column("token_id", Numeric(78)),
    Column("name", String),
    Column("symbol", String),
    Column("item_id", String, primary_key=True),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

ERC1155_TRANSFERS = Table(
    "erc1155_xfers",
    metadata,
    Column("id", BigInteger),
    Column("block_timestamp", TIMESTAMP, primary_key=True),
    Column("blknum", BigInteger),
    Column("txhash", String),
    Column("txpos", BigInteger),
    Column("logpos", BigInteger),
    Column("token_address", String),
    Column("operator", String),
    Column("from_address", String),
    Column("to_address", String),
    Column("token_id", Numeric(78)),
    Column("value", Numeric(78)),
    Column("id_pos", BigInteger),
    Column("id_cnt", BigInteger),
    Column("xfer_type", String),
    Column("name", String),
    Column("symbol", String),
    Column("item_id", String, primary_key=True),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

TRACES = Table(
    "traces",
    metadata,
    Column("id", BigInteger),
    Column("block_timestamp", TIMESTAMP, primary_key=True),
    Column("blknum", BigInteger),
    Column("txhash", String),
    Column("txpos", BigInteger),
    Column("from_address", String),
    Column("to_address", String),
    Column("value", Numeric(38)),
    Column("input", String),
    Column("output", String),
    Column("trace_type", String),
    Column("call_type", String),
    Column("reward_type", String),
    Column("gas", BigInteger),
    Column("gas_used", BigInteger),
    Column("subtraces", BigInteger),
    Column("trace_address", String),
    Column("error", String),
    Column("status", Integer),
    Column("item_id", String, primary_key=True),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

CONTRACTS = Table(
    "contracts",
    metadata,
    Column("id", BigInteger),
    Column("block_timestamp", TIMESTAMP, primary_key=True),
    Column("blknum", BigInteger),
    Column("txhash", String),
    Column("txpos", BigInteger),
    Column("trace_type", String),
    Column("trace_address", String),
    Column("address", String),
    Column("creater", String),
    Column("initcode", String),
    Column("bytecode", String),
    Column("func_sighashes", String),
    Column("is_erc20", Boolean),
    Column("is_erc721", Boolean),
    Column("item_id", String, primary_key=True),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)


TOKENS = Table(
    "tokens",
    metadata,
    Column("id", BigInteger),
    Column("block_timestamp", TIMESTAMP),
    Column("blknum", BigInteger),
    Column("txhash", String),
    Column("txpos", BigInteger),
    Column("trace_address", String),
    Column("address", String, primary_key=True),
    Column("symbol", String),
    Column("name", String),
    Column("decimals", BigInteger),
    Column("total_supply", Numeric(78)),
    Column("is_erc20", Boolean),
    Column("is_erc721", Boolean),
    # Column("is_erc1155", Boolean),
    Column("source", String),
    Column("is_proxy", Boolean),
    Column("upstream", String),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

TXPOOLS = Table(
    "txpools",
    MetaData(),
    Column("id", BigInteger),
    Column("block_timestamp", TIMESTAMP, primary_key=True),
    Column("blknum", BigInteger),
    Column("txhash", Text),
    Column("txpos", BigInteger),
    Column("nonce", BigInteger),
    Column("from_address", Text),
    Column("to_address", Text),
    Column("value", Numeric),
    Column("gas", BigInteger),
    Column("gas_price", Numeric),
    Column("input", Text),
    Column("max_fee_per_gas", BigInteger),
    Column("max_priority_fee_per_gas", BigInteger),
    Column("tx_type", Integer),
    Column("pool_type", Text),
    Column("item_id", String, primary_key=True),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)
