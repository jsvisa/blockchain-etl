from sqlalchemy.sql import func

from sqlalchemy import (
    Table,
    Column,
    Integer,
    Date,
    DateTime,
    BigInteger,
    String,
    Numeric,
    MetaData,
    Text,
    Boolean,
    TIMESTAMP,
)

metadata = MetaData()

# SQL schema is here https://github.com/blockchain-etl/ethereum-etl-postgres/tree/master/schema

BLOCKS = Table(
    "blocks",
    metadata,
    Column("id", BigInteger),
    Column("_st", Integer),
    Column("_st_day", Date),
    Column("blknum", BigInteger, primary_key=True),
    Column("blkhash", String),
    Column("parent_hash", String),
    Column("nonce", String),
    Column("sha3_uncles", String),
    Column("logs_bloom", String),
    Column("txs_root", String),
    Column("state_root", String),
    Column("receipts_root", String),
    Column("miner", String),
    Column("difficulty", Numeric(38)),
    Column("total_difficulty", Numeric(38)),
    Column("blk_size", BigInteger),
    Column("extra_data", Text),
    Column("gas_limit", BigInteger),
    Column("gas_used", BigInteger),
    Column("tx_count", BigInteger),
    Column("base_fee_per_gas", Numeric(38)),
    Column("uncle_count", Integer),
    Column("uncle0_hash", String),
    Column("uncle1_hash", String),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

TRANSACTIONS = Table(
    "txs",
    metadata,
    Column("id", BigInteger),
    Column("_st", Integer),
    Column("_st_day", Date),
    Column("blknum", BigInteger),
    Column("txhash", String, primary_key=True),
    Column("txpos", BigInteger),
    Column("nonce", BigInteger),
    Column("from_address", String),
    Column("to_address", String),
    Column("value", Numeric(38)),
    Column("gas", BigInteger),
    Column("gas_price", BigInteger),
    Column("input", String),
    Column("max_fee_per_gas", BigInteger),
    Column("max_priority_fee_per_gas", BigInteger),
    Column("tx_type", BigInteger),
    Column("receipt_cumulative_gas_used", BigInteger),
    Column("receipt_gas_used", BigInteger),
    Column("receipt_contract_address", String),
    Column("receipt_root", String),
    Column("receipt_status", BigInteger),
    Column("receipt_effective_gas_price", BigInteger),
    Column("receipt_log_count", BigInteger),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

LOGS = Table(
    "logs",
    metadata,
    Column("id", BigInteger),
    Column("_st", Integer),
    Column("_st_day", Date),
    Column("blknum", BigInteger),
    Column("txhash", String, primary_key=True),
    Column("txpos", BigInteger),
    Column("logpos", BigInteger, primary_key=True),
    Column("address", String),
    Column("n_topics", Integer),
    Column("topic0", String),
    Column("topic1", String),
    Column("topic2", String),
    Column("topic3", String),
    Column("data", String),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

TOKEN_TRANSFERS = Table(
    "token_xfers",
    metadata,
    Column("id", BigInteger),
    Column("_st", Integer),
    Column("_st_day", Date),
    Column("blknum", BigInteger),
    Column("txhash", String, primary_key=True),
    Column("txpos", BigInteger),
    Column("logpos", BigInteger, primary_key=True),
    Column("token_address", String),
    Column("from_address", String),
    Column("to_address", String),
    Column("value", Numeric(78)),
    Column("name", String),
    Column("symbol", String),
    Column("decimals", BigInteger),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

ERC721_TRANSFERS = Table(
    "erc721_xfers",
    metadata,
    Column("id", BigInteger),
    Column("_st", Integer),
    Column("_st_day", Date),
    Column("blknum", BigInteger),
    Column("txhash", String, primary_key=True),
    Column("txpos", BigInteger),
    Column("logpos", BigInteger, primary_key=True),
    Column("token_address", String),
    Column("from_address", String),
    Column("to_address", String),
    Column("token_id", Numeric(78)),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

ERC1155_TRANSFERS = Table(
    "erc1155_xfers",
    metadata,
    Column("id", BigInteger),
    Column("_st", Integer),
    Column("_st_day", Date),
    Column("blknum", BigInteger),
    Column("txhash", String, primary_key=True),
    Column("txpos", BigInteger),
    Column("logpos", BigInteger, primary_key=True),
    Column("token_address", String),
    Column("operator", String),
    Column("from_address", String),
    Column("to_address", String),
    Column("token_id", Numeric(78)),
    Column("value", Numeric(78)),
    Column("id_pos", BigInteger, primary_key=True),
    Column("id_cnt", BigInteger),
    Column("xfer_type", String),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

TRACES = Table(
    "traces",
    metadata,
    Column("id", BigInteger),
    Column("_st", Integer),
    Column("_st_day", Date),
    Column("blknum", BigInteger),
    Column("txhash", String, primary_key=True),
    Column("txpos", BigInteger),
    Column("from_address", String),
    Column("to_address", String),
    Column("value", Numeric(38)),
    Column("input", String),
    Column("output", String),
    Column("trace_type", String),
    Column("call_type", String),
    Column("reward_type", String),
    Column("gas", BigInteger),
    Column("gas_used", BigInteger),
    Column("subtraces", BigInteger),
    Column("trace_address", String, primary_key=True),
    Column("error", String),
    Column("status", Integer),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

TOKENS = Table(
    "tokens",
    metadata,
    Column("id", BigInteger),
    Column("_st", Integer),
    Column("_st_day", Date),
    Column("blknum", BigInteger),
    Column("txhash", String, primary_key=True),
    Column("txpos", BigInteger),
    Column("trace_address", String),
    Column("address", String, primary_key=True),
    Column("symbol", String),
    Column("name", String),
    Column("decimals", BigInteger),
    Column("total_supply", Numeric(78)),
    Column("is_erc20", Boolean),
    Column("is_erc721", Boolean),
    # Column("is_erc1155", Boolean),
    Column("source", String),
    Column("is_proxy", Boolean),
    Column("upstream", String),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

CONTRACTS = Table(
    "contracts",
    metadata,
    Column("id", BigInteger),
    Column("_st", Integer),
    Column("_st_day", Date),
    Column("blknum", BigInteger),
    Column("txhash", String, primary_key=True),
    Column("txpos", BigInteger),
    Column("trace_type", String),
    Column("trace_address", String),
    Column("address", String, primary_key=True),
    Column("creater", String),
    Column("initcode", String),
    Column("bytecode", String),
    Column("func_sighashes", String),
    Column("is_erc20", Boolean),
    Column("is_erc721", Boolean),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

TOKEN_HOLDERS = Table(
    "addr_tokens",
    metadata,
    Column("id", BigInteger, autoincrement=True),
    Column("_st", Integer),
    Column("_st_day", Date),
    Column("blknum", BigInteger),
    Column("address", String, primary_key=True),
    Column("token_address", String, primary_key=True),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

ERC1155_HOLDERS = Table(
    "addr_erc1155_tokens",
    metadata,
    Column("id", BigInteger, autoincrement=True),
    Column("_st", Integer),
    Column("_st_day", Date),
    Column("blknum", BigInteger),
    Column("address", String, primary_key=True),
    Column("token_address", String, primary_key=True),
    Column("token_id", Numeric(78), primary_key=True),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

TOKEN_HOLDERS_V2 = Table(
    "token_holders",
    metadata,
    Column("id", BigInteger, autoincrement=True),
    Column("address", String, primary_key=True),
    Column("token_address", String, primary_key=True),
    Column("first_send_st", Integer),
    Column("first_send_st_day", Date),
    Column("first_send_blknum", BigInteger),
    Column("first_send_txhash", String),
    Column("first_send_txpos", Integer),
    Column("first_send_logpos", Integer),
    Column("first_recv_st", Integer),
    Column("first_recv_st_day", Date),
    Column("first_recv_blknum", BigInteger),
    Column("first_recv_txhash", String),
    Column("first_recv_txpos", Integer),
    Column("first_recv_logpos", Integer),
    Column("last_send_st", Integer),
    Column("last_send_st_day", Date),
    Column("last_send_blknum", BigInteger),
    Column("last_send_txhash", String),
    Column("last_send_txpos", Integer),
    Column("last_send_logpos", Integer),
    Column("last_recv_st", Integer),
    Column("last_recv_st_day", Date),
    Column("last_recv_blknum", BigInteger),
    Column("last_recv_txhash", String),
    Column("last_recv_txpos", Integer),
    Column("last_recv_logpos", Integer),
    Column("send_value", Numeric, default=0),
    Column("recv_value", Numeric, default=0),
    Column("send_count", BigInteger, default=0),
    Column("recv_count", BigInteger, default=0),
    Column("send_blk_count", BigInteger, default=0),
    Column("recv_blk_count", BigInteger, default=0),
    Column("send_tx_count", BigInteger, default=0),
    Column("recv_tx_count", BigInteger, default=0),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_blknum", BigInteger, default=0),
)

ERC1155_HOLDERS_V2 = Table(
    "erc1155_token_holders",
    metadata,
    Column("id", BigInteger, autoincrement=True),
    Column("address", String, primary_key=True),
    Column("token_address", String, primary_key=True),
    Column("token_id", Numeric(38), primary_key=True),
    Column("first_send_st", Integer),
    Column("first_send_st_day", Date),
    Column("first_send_blknum", BigInteger),
    Column("first_send_txhash", String),
    Column("first_send_txpos", Integer),
    Column("first_send_logpos", Integer),
    Column("first_recv_st", Integer),
    Column("first_recv_st_day", Date),
    Column("first_recv_blknum", BigInteger),
    Column("first_recv_txhash", String),
    Column("first_recv_txpos", Integer),
    Column("first_recv_logpos", Integer),
    Column("last_send_st", Integer),
    Column("last_send_st_day", Date),
    Column("last_send_blknum", BigInteger),
    Column("last_send_txhash", String),
    Column("last_send_txpos", Integer),
    Column("last_send_logpos", Integer),
    Column("last_recv_st", Integer),
    Column("last_recv_st_day", Date),
    Column("last_recv_blknum", BigInteger),
    Column("last_recv_txhash", String),
    Column("last_recv_txpos", Integer),
    Column("last_recv_logpos", Integer),
    Column("send_value", Numeric, default=0),
    Column("recv_value", Numeric, default=0),
    Column("send_count", BigInteger, default=0),
    Column("recv_count", BigInteger, default=0),
    Column("send_blk_count", BigInteger, default=0),
    Column("recv_blk_count", BigInteger, default=0),
    Column("send_tx_count", BigInteger, default=0),
    Column("recv_tx_count", BigInteger, default=0),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_blknum", BigInteger, default=0),
)

ERC721_TOKENIDS = Table(
    "erc721_token_ids",
    metadata,
    Column("id", BigInteger, autoincrement=True),
    Column("token_name", String),
    Column("token_address", String, primary_key=True),
    Column("token_id", Numeric(38), primary_key=True),
    Column("turnover_count", BigInteger),
    Column("minted_st", Integer),
    Column("minted_st_day", Date),
    Column("minted_blknum", BigInteger),
    Column("minted_txhash", String),
    Column("minted_txpos", Integer),
    Column("minted_logpos", Integer),
    Column("xfered_st", Integer),
    Column("xfered_st_day", Date),
    Column("xfered_blknum", BigInteger),
    Column("xfered_txhash", String),
    Column("xfered_txpos", Integer),
    Column("xfered_logpos", Integer),
    Column("from_address", String),
    Column("to_address", String),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

ERC1155_TOKENIDS = Table(
    "erc1155_token_ids",
    metadata,
    Column("id", BigInteger, autoincrement=True),
    Column("token_name", String),
    Column("token_address", String, primary_key=True),
    Column("token_id", Numeric(38), primary_key=True),
    Column("turnover_count", BigInteger),
    Column("minted_count", BigInteger),
    Column("minted_value", Numeric),
    Column("burned_count", BigInteger),
    Column("burned_value", Numeric),
    Column("total_supply", Numeric(38)),
    Column("minted_st", Integer),
    Column("minted_st_day", Date),
    Column("minted_blknum", BigInteger),
    Column("minted_txhash", String),
    Column("minted_txpos", Integer),
    Column("minted_logpos", Integer),
    Column("xfered_st", Integer),
    Column("xfered_st_day", Date),
    Column("xfered_blknum", BigInteger),
    Column("xfered_txhash", String),
    Column("xfered_txpos", Integer),
    Column("xfered_logpos", Integer),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

NFT_TOKENS = Table(
    "nft_tokens",
    metadata,
    Column("id", BigInteger, autoincrement=True),
    Column("address", String, primary_key=True),
    Column("name", String),
    Column("symbol", String),
    Column("token_type", String),
    Column("image_uri_pattern", String),
    Column("video_uri_pattern", String),
    Column("supported_features", String),
    Column("created_st", Integer),
    Column("created_st_day", Date),
    Column("created_blknum", BigInteger),
    Column("created_txhash", String),
    Column("updated_blknum", BigInteger),
    Column("total_supply", Numeric),
    Column("minted_count", BigInteger),
    Column("burned_count", BigInteger),
    Column("batch_id", Integer),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

NFT_ORDERBOOKS = Table(
    "v2_nft_orderbooks",
    metadata,
    Column("id", BigInteger, primary_key=True, autoincrement=True),
    Column("_st", Integer),
    Column("_st_day", Date),
    Column("blknum", BigInteger),
    Column("txhash", String),
    Column("txpos", BigInteger),
    Column("xfer_logpos", BigInteger),
    Column("order_logpos", BigInteger),
    Column("trace_address", String),
    Column("token_type", String),
    Column("token_address", String),
    Column("token_id", Numeric(38)),
    Column("token_value", Numeric(38)),
    Column("from_address", String),
    Column("to_address", String),
    Column("maker", String),
    Column("taker", String),
    Column("price", Numeric(38)),
    Column("currency", String),
    Column("currency_decimals", BigInteger),
    Column("pack_index", Integer),
    Column("pack_count", Integer),
    Column("value", Numeric(38)),
    Column("value_from", String),
    Column("value_to", String),
    Column("value_usd", Numeric(38)),
    Column("platform", String),
    Column("action", String),
    Column("pattern", String),
    Column("fee_from", String),
    Column("fee_to", String),
    Column("fee_value", Numeric(38)),
    Column("fee_value_usd", Numeric(38)),
    Column("fee_currency", String),
    Column("fee_currency_decimals", BigInteger),
    Column("app", String),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

TOKEN_HISTORY_BALANCES = Table(
    "token_history_balances",
    metadata,
    Column("id", BigInteger),
    Column("address", String, primary_key=True),
    Column("token_address", String, primary_key=True),
    Column("blknum", BigInteger, primary_key=True),
    Column("out_blocks", BigInteger),
    Column("vin_blocks", BigInteger),
    Column("out_txs", BigInteger),
    Column("vin_txs", BigInteger),
    Column("out_xfers", BigInteger),
    Column("vin_xfers", BigInteger),
    Column("out_value", Numeric),
    Column("vin_value", Numeric),
    Column("out_1th_st", Integer),
    Column("vin_1th_st", Integer),
    Column("out_nth_st", Integer),
    Column("vin_nth_st", Integer),
    Column("out_1th_blknum", Integer),
    Column("vin_1th_blknum", Integer),
    Column("out_nth_blknum", Integer),
    Column("vin_nth_blknum", Integer),
    Column("out_1th_st_day", Date),
    Column("vin_1th_st_day", Date),
    Column("out_nth_st_day", Date),
    Column("vin_nth_st_day", Date),
    Column("decimals", BigInteger),
    Column("value", Numeric),
    Column("balance", Numeric),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)


TOKEN_LATEST_BALANCES = Table(
    "token_latest_balances",
    metadata,
    Column("id", BigInteger),
    Column("address", String, primary_key=True),
    Column("token_address", String, primary_key=True),
    Column("blknum", BigInteger),
    Column("out_blocks", BigInteger),
    Column("vin_blocks", BigInteger),
    Column("out_txs", BigInteger),
    Column("vin_txs", BigInteger),
    Column("out_xfers", BigInteger),
    Column("vin_xfers", BigInteger),
    Column("out_value", Numeric),
    Column("vin_value", Numeric),
    Column("out_1th_st", Integer),
    Column("vin_1th_st", Integer),
    Column("out_nth_st", Integer),
    Column("vin_nth_st", Integer),
    Column("out_1th_blknum", Integer),
    Column("vin_1th_blknum", Integer),
    Column("out_nth_blknum", Integer),
    Column("vin_nth_blknum", Integer),
    Column("out_1th_st_day", Date),
    Column("vin_1th_st_day", Date),
    Column("out_nth_st_day", Date),
    Column("vin_nth_st_day", Date),
    Column("decimals", BigInteger),
    Column("value", Numeric),
    Column("balance", Numeric),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

HISTORY_BALANCES = Table(
    "history_balances",
    metadata,
    Column("id", BigInteger),
    Column("address", String, primary_key=True),
    Column("blknum", BigInteger, primary_key=True),
    Column("out_blocks", BigInteger),
    Column("vin_blocks", BigInteger),
    Column("cnb_blocks", BigInteger),
    Column("out_txs", BigInteger),
    Column("vin_txs", BigInteger),
    Column("cnb_txs", BigInteger),
    Column("out_xfers", BigInteger),
    Column("vin_xfers", BigInteger),
    Column("cnb_xfers", BigInteger),
    Column("out_value", Numeric),
    Column("vin_value", Numeric),
    Column("cnb_value", Numeric),
    Column("fee_value", Numeric),
    Column("value", Numeric),
    Column("balance", Numeric),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

LATEST_BALANCES = Table(
    "latest_balances",
    metadata,
    Column("id", BigInteger),
    Column("address", String, primary_key=True),
    Column("blknum", BigInteger),
    Column("out_blocks", BigInteger),
    Column("vin_blocks", BigInteger),
    Column("cnb_blocks", BigInteger),
    Column("out_txs", BigInteger),
    Column("vin_txs", BigInteger),
    Column("cnb_txs", BigInteger),
    Column("out_xfers", BigInteger),
    Column("vin_xfers", BigInteger),
    Column("cnb_xfers", BigInteger),
    Column("out_value", Numeric),
    Column("vin_value", Numeric),
    Column("cnb_value", Numeric),
    Column("fee_value", Numeric),
    Column("out_1th_st", Integer),
    Column("vin_1th_st", Integer),
    Column("cnb_1th_st", Integer),
    Column("out_nth_st", Integer),
    Column("vin_nth_st", Integer),
    Column("cnb_nth_st", Integer),
    Column("out_1th_blknum", Integer),
    Column("vin_1th_blknum", Integer),
    Column("cnb_1th_blknum", Integer),
    Column("out_nth_blknum", Integer),
    Column("vin_nth_blknum", Integer),
    Column("cnb_nth_blknum", Integer),
    Column("out_1th_st_day", Date),
    Column("vin_1th_st_day", Date),
    Column("cnb_1th_st_day", Date),
    Column("out_nth_st_day", Date),
    Column("vin_nth_st_day", Date),
    Column("cnb_nth_st_day", Date),
    Column("value", Numeric),
    Column("balance", Numeric),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
)

TRACKS = Table(
    "tracks",
    metadata,
    Column("id", BigInteger),
    Column("address", String, primary_key=True),
    Column("from_address", String, primary_key=True),
    Column("block_timestamp", TIMESTAMP),
    Column("blknum", BigInteger),
    Column("txhash", String, primary_key=True),
    Column("logpos", BigInteger),
    Column("trace_address", Text),
    Column("original", String),
    Column("label", String),
    Column("hop", Integer),
    Column("in_value", Numeric),
    Column("out_value", Numeric),
    Column("token_address", String),
    Column("token_name", String),
    Column("track_id", String),
    Column("source", String),
    Column("stop", Boolean, default=False),
    Column("created_at", DateTime, server_default=func.current_timestamp()),
    Column("updated_at", DateTime, server_default=func.current_timestamp()),
    Column("deleted_at", DateTime, server_default=None),
)
